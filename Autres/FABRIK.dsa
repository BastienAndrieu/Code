//===============================================================================================
// globals
//===============================================================================================
var configuration;
var side;


//===============================================================================================
// dialog setup
//===============================================================================================
var buttonMinWidth = 80;
var buttonMaxHeight = 20;
var margin = 5;
var spacing = 5;

var wDlg = new DzDialog;
wDlg.caption = "FABRIK";
var wDlgLyt = new DzVBoxLayout( wDlg );
wDlgLyt.autoAdd = true;
wDlgLyt.margin = margin;
wDlgLyt.spacing = spacing;

var wBtnGrp1 = new DzVButtonGroup( wDlg );
wBtnGrp1.columns = 2;
wBtnGrp1.title = "Options";

var wTol = new DzFloatSlider( wDlg );
wTol.label = "Distance to target (tolerance)";
wTol.labelVisible = true;
wTol.max = 100;
wTol.min = 1e-9;
wTol.value = 1e-3;
wTol.clamped = true;


// Create a button group for choosing the Side
var wSideBG = new DzVButtonGroup( wDlg );
wSideBG.columns = 1;
 
// Create the Side options
var wSideL = new DzRadioButton( wSideBG );
wSideL.text = "Left -> Right";
wSideL.checked = true;
var wSideR = new DzRadioButton( wSideBG );
wSideR.text = "Right -> Left";




// Create a button group for choosing the Conf
var wConfGB = new DzGroupBox( wDlg );
wConfGB.flat = true;
var wConfLyt = new DzGridLayout( wConfGB );
wConfLyt.margin = margin;
wConfLyt.spacing = spacing;
wConfLyt.setColStretch( 1, 1 );
wConfGB.title = "Configuration";
 
// Create the Conf buttons
var wConf0 = new DzPushButton( wConfGB );
wConf0.text = "Boxtie (forearms parallel horizontal)";
wConf0.minWidth = buttonMinWidth;
wConf0.maxHeight = buttonMaxHeight;
wDlgBtnsLyt.addWidget( wGoBtn, 0, 1 );
connect( wConf0, "clicked()", set_config0 );

var wConf1 = new DzPushButton( wConfGB );
wConf1.text = "Wrists crossed low";
wConf1.minWidth = buttonMinWidth;
wConf1.maxHeight = buttonMaxHeight;
wDlgBtnsLyt.addWidget( wGoBtn, 0, 2 );
connect( wConf1, "clicked()", set_config1 );

var wConf2 = new DzPushButton( wConfGB );
wConf2.text = "Wrists crossed high";
wConf2.minWidth = buttonMinWidth;
wConf2.maxHeight = buttonMaxHeight;
wDlgBtnsLyt.addWidget( wGoBtn, 0, 3 );
connect( wConf2, "clicked()", set_config2 );


// Create the action buttons
var wDlgBtnsGB = new DzGroupBox( wDlg );
wDlgBtnsGB.flat = true;
var wDlgBtnsLyt = new DzGridLayout( wDlgBtnsGB );
wDlgBtnsLyt.margin = margin;
wDlgBtnsLyt.spacing = spacing;
wDlgBtnsLyt.setColStretch( 1, 1 );

var wGoBtn = new DzPushButton( wDlgBtnsGB );
wGoBtn.text = "&Go";
wGoBtn.minWidth = buttonMinWidth;
wGoBtn.maxHeight = buttonMaxHeight;
wDlgBtnsLyt.addWidget( wGoBtn, 0, 1 );
connect( wGoBtn, "clicked()", process );

var wCancelBtn = new DzPushButton( wDlgBtnsGB );
wCancelBtn.text = "&Exit";
wCancelBtn.minWidth = buttonMinWidth;
wCancelBtn.maxHeight = buttonMaxHeight;
wDlg.setRejectButton( wCancelBtn );
wDlgBtnsLyt.addWidget( wCancelBtn, 0, 2 );

wDlg.exec();

//===============================================================================================
function process()
{
	// get target node (opposite wrist)

	// get joints array
	return(true);
}
//===============================================================================================

// Sets initial angle at collar (twist, bend, front/back), shoulder (twist, bend, front/back) and
// forearm (bend) depending on chosen configuration and side
function init_config( )
{
	switch ( configuration ) {
		case 0 : // arms parallel horizontal (boxtie)
			init_forearm_bend = 90.0;
			init_collar_twist = 10.0;
			init_shoulder_twist = 60.0;
			break;

		case 1: // wrists crossed low
			init_forearm_bend = 30.0;
			init_collar_twist = 10.0;
			init_shoulder_twist = 60.0;
			break;

		case 2: // wrists crossed high
			init_forearm_bend = 120.0;
			init_collar_twist = 10.0;
			init_shoulder_twist = 60.0;
			break;
		
		default : // arms parallel horizontal (boxtie)
			return false;
	}

	if ( side == 1 ) {
		// negate angle if side = right (check!)
	}

	return(true);
}


//
function set_config0()
{
	configuration = 0;
	return(true);
}

function set_config1()
{
	configuration = 1;
	return(true);
}

function set_config2()
{
	configuration = 2;
	return(true);
}


//
function compute_joint_positions(target_pos, joints, iteration_max) {
	var root_pos = DzVec3();
	var shoulder_pos = DzVec3();
	var elbow_pos    = DzVec3();
	var wrist_pos    = DzVec3();

	// initial joint positions
	// (...)
	var root_pos_tmp = root_pos;

	// initial bone_lengths
	var collar_length  = (shoulder_pos.subtract(root_pos)).lenght();
	var arm_length     = (elbow_pos.subtract(shoulder_pos)).lenght();
	var forearm_length = (wrist_pos.subtract(elbow_pos)).lenght();
	
	var iteration;
	for (iteration = 0; iteration < iteration_max; iteration++) {
  		// target-end effector distance
		var dpos = target_pos.subtract(wrist_pos));
		var dist = dpos.length();
		if ( dist < wTol.value )
		{
			return(true);
		}

		// forward reaching
		wrist_pos    = target_pos;
		elbow_pos    = forward_joint_position(wrist_pos, elbow_pos, forearm_length);
		shoulder_pos = forward_joint_position(elbow_pos, shoulder_pos, arm_length);
		root_pos_tmp = forward_joint_position(shoulder_pos, root_pos, collar_length);

		// backward reaching
		shoulder_pos = backward_joint_position(root_pos, shoulder_pos, collar_length);
		elbow_pos    = backward_joint_position(shoulder_pos, elbow_pos, arm_length);
		wrist_pos    = backward_joint_position(elbow_pos, wrist_pos, forearm_length);
	}
}



function forward_joint_position(child_pos, parent_pos, bone_length) {
	var vec = parent_pos.subtract(child_pos);
	vec.setLength(bone_length);
	return(child_pos.add(vec));
}


function backward_joint_position(parent_pos, child_pos, bone_length) {
	var vec = child_pos.subtract(parent_pos);
	vec.setLength(bone_length);
	return(parent_pos.add(vec));
}



/*
function compute_joint_rotations() {
}
*/


//
/*
function fabrik(target_pos, joints, iteration_max) {
	var root_pos = joints[0].getWSPos();
	var njoints = joints.length;

	var iteration;
	for (iteration = 0; iteration < iteration_max; iteration++) {
  		// target-end effector distance
		var dpos = target_pos.subtract(joints[njoints-1].getWSPos());
		var dist = dpos.length();
		if ( dist < wTol.value )
		{
			return(true);
		}
		
		// forward reaching
		joints[njoints-1]
	} 
	return(false);
}
*/

